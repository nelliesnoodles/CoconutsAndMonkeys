
# coconuts and monkeys

"""
There are five pirates and a pile of coconuts.
First pirate until the last, wakes up and divides the pile up by 5, there is always
one remaining, which the pirate gives to a monkey, the pirate takes his share, hides it.

The next pirate wakes up to the pile, and does the same.

Until in the morning the pile that remains is divisible by 5, and each pirate gets his equivelant share.

"""


def reduction(pile, pirates, remainder):
    # pirate divides pile up by 5 (number of pirates) gives remainder 1 to monkey
    #print(f"original pile = {pile}")
    pirates_share = (pile - remainder) / pirates
    newpile = pile - pirates_share - remainder
    #print(f"pirates_share = {pirates_share}, monkey's share = 1, newpile = {pile} - {pirates_share} - 1")
    #print(f"newpile = {newpile}")
    return newpile

def run_pile(pirates, original_pile, remainder):
    #x = n - 1 + x
    pile = original_pile
    for i in range(0, pirates):
        print("pile =", pile)
        pile = reduction(pile, pirates, remainder)
   
    return pile


def recurse_pile(pirates, original_pile, remainder, max=None):
    # add the remainder
    if max == None:
        max = pirates ** (pirates) + remainder
    
    pile = run_pile(pirates, original_pile, remainder)
    if pile % pirates == 0 or original_pile > max:
        print(f"original_pile = {original_pile}")
        return pile
    else:
        quotient = pirates - remainder
        original_pile += quotient
        print("max = ", max)
        print("new_pile = ", original_pile)
      
        return recurse_pile(pirates, original_pile, remainder, max)

recurse_pile(5, 3121, 1) #work original_pile = first number, (pirates ** pirates + remainder)
#recurse_pile(3, 29, 2) #work 
#recurse_pile(6, 46657, 1, max=47000) #fail


    


        
